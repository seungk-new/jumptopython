# -*- coding: utf-8 -*-
"""210805lesson.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15ripQWXJ1-JjbBMq1nuCEJU7Byg0B_6x
"""

class Bicycle():
    def move(self, speed):
        print("자전거: 시속{0}킬로터 전진".format(speed))
    def turn(self, direction):
        print("자전거: {0}회전".format(direction))
    def stop(self):
        print("자전거({0},{1}: 정지)".format(self.wheel_size,self.color))

my_bicycle = Bicycle()

my_bicycle.wheel_size = 26
my_bicycle.color = 'black'

my_bicycle.move(30)
my_bicycle.turn('좌')
my_bicycle.stop()

# 객체 초기화
# Bicycle클래스를 선언하고 객체를 생성한 후에 객체의 속성을 설정
# __init__()함수는 클래스의 인스턴스가 생성될 때(즉, 객체가 생성될 때)자동으로 실행되기 때문에
# __init__()함수에 초기화하려는 인자를 정의하려면 객체를 생성할 때 속성을 초기화 할 수 있음

class Bicycle():
    def __init__(self, wheel_size, color):
        self.wheel_size = wheel_size
        self.color = color

    def move(self, speed): # move메서드 == 객체의 행위(인자...)
        print("자전거: 시속 {0}키로미터로 전진:".format(speed))
    
    def turn(self, direction): # turn메서드 == 객체의 행위(인자...)
        print("자전거: {0}회전".format(direction))

    def stop(self): # stop매서드 == 객체의 행위(인자...)
        print("자전거({0},{1}): 정지".format(self.wheel_size, self.color))
    
my_bicycle = Bicycle(26, 'black') #객체 생성과 동시에 속성값을 가짐

my_bicycle.move(30)
my_bicycle.turn('좌')
my_bicycle.stop()

class Car():
    instance_count = 0 # 클래스 변수 생성 및 초기화

    def __init__(self,size,color):
        self.size = size # 인스턴스 변수 생성 및 초기화
        self.color = color # 인스턴스 변수 생성 및 초기화
        Car.instance_count = Car.instance_count + 1 # 클래스 변수 이용
        print("자동차 객체의 수: {0}".format(Car.instance_count))

    def move(self):
        print("자동차 ({0}&{1})가 움직인다.".format(self.size, self.color))

car1 = Car('small', 'white')
car2 = Car('big', 'black')

print("Car클래스의 총 인스턴스 개수{}:".format(Car.instance_count))

print("Car 클래스의 총 인스턴스 개수:{}".format(car1.instance_count))
print("Car 클래스의 총 인스턴스 개수:{}".format(car2.instance_count))
# 출력 결과를 보면 car1과 car2 객체에서 사용한 클래스 변수 instance_count는 값이 
# 같은 것을 볼 수 있음. 모든 객체에서 클래스 변수가 공통으로 사용되기 때문

car1.move()
car2.move()
# 출력 결과에서 볼 수 있듯이 인스턴스 변수(여기서는 self.size와 self.color)는 각 개체에서
# 별도로 관리됨

class Car2():
    count = 0 # 클래스 변수 생성 및 초기화

    def __init__(self, size, num):
        self.size = size # 인스턴스 변수 생성 및 초기화
        self.count = num # 인스턴스 변수 생성 및 초기화
        Car2.count += 1 # 클래스 변수 이용
        print("자동차 객체의 수: Car2.count = {0}".format(Car2.count))
        print("인스턴스 변수 초기화: self.count = {0}".format(self.count))
    
    def move(self):
        print("자동차 ({0}&{1})가 움직인다.".format(self.size, self.count))

car1 = Car2("big", 20)
car2 = Car2("small", 30)



